name: SA_Project CI

on:
  push:
    branches:
      - feature/*
    
jobs:
  build_stage:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version:
          - 21.7.0
        java-version:
          - 17

    steps:
      - name: Checkout and copy code to workflow
        uses: actions/checkout@v2

      - name: Configure Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set up Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'adopt'

      #  Configurar microservicios
      # - name: Install and Build Microservice frontend
      #   run: |
      #     cd ProyectoSA_frontend/
      #     npm install

      - name: Install and Build Microservice tickets
        run: |
          cd ProyectoSA_backend/
          mvn clean install -U
          mvn clean package
          mvn clean test jacoco:report
    
      - name: Publish JaCoCo report artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: ProyectoSA_backend/target/site/jacoco

  delivery-stage:
    runs-on: ubuntu-latest

    env:
      ENVIRONMENT: test
    
    # Establecemos los directorios y nombres de imagen, de los Docker
    strategy:
      matrix:
        image_name: [data_service, maven_microservice_ticket]
        directory: [Documentation/, ProyectoSA_backend/]

    steps:
      # Copy code
      - name: Checkout and copy code to workflow
        uses: actions/checkout@v2

      # Configure docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Autenticación con Dockerhub      
      - name: Iniciar sesión en Dockerhub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      # TAG
      # Permisos
      - name: Set execute permissions for script
        run: chmod +x ./scripts/git_update.sh

      # Configurar Tags automaticamente
      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          ./scripts/git_update.sh -v patch        
        shell: bash

      # Debug Tag
      - name: Debug Git Tag
        run: |
          echo "Git Tag: <${{ steps.increment-git-tag.outputs.git-tag }}>"      
          
      # Configurar .env frontend
      - name: Configure frontend environment variables
        run: |        
          cd ProyectoSA_frontend/
          echo "${{ secrets.TEST_ENVIRONMENT }}" >> .env

      # Construir y empujar imágenes Docker
      - name: Build and push Docker images
        env:
          GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
          REPOSITORY: ${{ secrets.DOCKERHUB_USERNAME }}        
        run: |
          bash scripts/build_and_push_image_dockerhub.sh --environment="${{ env.ENVIRONMENT }}" --directory="${{ matrix.directory }}" --repository="${{ secrets.DOCKERHUB_USERNAME }}" --image_name="${{ matrix.image_name }}" --tag="${{ env.GIT_TAG }}"

      - name: Obtener el tag más reciente
        id: obtener-tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Usar el tag obtenido
        run: echo "El tag más reciente es ${{ steps.obtener-tag.outputs.latest_tag }}"

      # Desplegar
      - name: Deploy
        env:
          #ENVIRONMENT: ${{ env.ENVIRONMENT }}
          GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |
          sed -i "s/\${REPOSITORY}/$(echo ${{ secrets.DOCKERHUB_USERNAME }})/g" k8s/k8s-configure.yaml
          sed -i "s/\${TAG}/$(echo ${GIT_TAG})/g" k8s/k8s-configure.yaml
          sed -i "s/\${ENVIRONMENT}/$(echo ${ENVIRONMENT})/g" k8s/k8s-configure.yaml
          cat k8s/k8s-configure.yaml
      #    kubectl apply -f k8s/
          
      