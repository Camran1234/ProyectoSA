name: SA_Project CI

on:
  push:
    branches:
      - feature/*
    
jobs:
  build_stage:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version:
          - 21.7.0
        java-version:
          - 17

    steps:
      - name: Checkout and copy code to workflow
        uses: actions/checkout@v2

      - name: Configure Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set up Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'adopt'

      # Configurar microservicios
      - name: Install and Build Microservice frontend
        run: |
          cd ProyectoSA_frontend/
          npm install

      - name: Install and Build Microservice tickets
        run: |
          cd ProyectoSA_backend/
          mvn -T 1C -B -q clean install -U
          mvn -T 1C -B -q clean package
          mvn -T 1C -q clean test jacoco:report
    
      - name: Publish JaCoCo report artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: ProyectoSA_backend/target/site/jacoco

  delivery-stage:
    runs-on: ubuntu-latest

    env:
      ENVIRONMENT: test
    
    steps:
      # Copy code
      - name: Checkout and copy code to workflow
        uses: actions/checkout@v2

      # Configure docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Configure Kubernetes control
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'          
        #run: |
        #  sudo apt-get update
        #  sudo apt-get install -y kubectl

      - name: Configure kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG_DATA_TEST }}" > ./kubeconfig
          cat kubeconfig
          export KUBECONFIG=$PWD/kubeconfig

      - name: Print KUBECONFIG
        run: |
          kubectl --kubeconfig=kubeconfig get pods --all-namespaces

      # Configure Ansible
      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible
          ansible --version

      # Autenticaci칩n con Dockerhub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}      

      # TAG
      # Permisos
      - name: Set execute permissions for script
        run: chmod +x ./scripts/git_update.sh

      # Configurar Tags automaticamente
      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          ./scripts/git_update.sh -v patch        
        shell: bash

      # Debug Tag
      - name: Debug Git Tag
        run: |
          echo "Git Tag: <${{ steps.increment-git-tag.outputs.git-tag }}>"      
          
      # Configurar .env frontend
      - name: Configure frontend environment variables
        run: |        
          cd ProyectoSA_frontend/
          echo "${{ secrets.BACKEND_ENVIRONMENT }}" >> .env

      # Construir y empujar im치genes Docker
      - name: Build and push Docker images
        env:
          GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
          REPOSITORY: ${{ secrets.DOCKERHUB_USERNAME }}
          #Agregar en este apartado la imagen del frontend
          IMAGES_DIRECTORIES: |
            data_service:Documentation/
            maven_microservice_ticket:ProyectoSA_backend/
            frontend_microservice_ticket:ProyectoSA_frontend/
        # Iterate over each pair and build/push Docker images
        run: |
          for pair in $IMAGES_DIRECTORIES; do
            IFS=':' read -r image_name directory <<< "$pair"
            bash scripts/build_and_push_image_dockerhub.sh \
              --environment="${{ env.ENVIRONMENT }}" --directory="${directory}"   \
              --repository="${{ env.REPOSITORY }}"   --image_name="${image_name}" \
              --tag="${{ env.GIT_TAG }}"
          done

      #Test tag production
      - name: Obtener el tag m치s reciente
        id: obtener-tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Usar el tag obtenido
        run: echo "El tag m치s reciente es ${{ steps.obtener-tag.outputs.latest_tag }}"

      # Desplegar
      - name: Deploy prepare files
        env:
          #ENVIRONMENT: ${{ env.ENVIRONMENT }}
          GIT_TAG: ${{ steps.obtener-tag.outputs.latest_tag }}
        run: |
          sed -i "s/\${REPOSITORY}/$(echo ${{ secrets.DOCKERHUB_USERNAME }})/g" k8s/k8s-configure.yaml
          sed -i "s/\${TAG}/$(echo ${GIT_TAG})/g" k8s/k8s-configure.yaml
          sed -i "s/\${ENVIRONMENT}/$(echo ${ENVIRONMENT})/g" k8s/k8s-configure.yaml
          cat k8s/k8s-configure.yaml

      # Desplegar
      - name: Deploy
        run: |
          kubectl --kubeconfig=kubeconfig apply -f k8s/
        # continue-on-error: true

      # Dar permisos a las llaves
      - name: Give privileges to keys
        run: |
          chmod 600 deploy_frontend/resources/test/test_rsa
          chmod 600 deploy_frontend/resources/test/test_rsa.pub
      ## Set up terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.1.

      ## Terraform init
      - name: Init terraform
        run: |
          cd deploy_frontend/terraform/test
          terraform init

      ## Terraform plan
      - name: Plan terraform
        run: |
          cd deploy_frontend/terraform/test
          terraform plan
      
      ## Terraform apply
      - name: Apply terraform
        run: |
          cd deploy_frontend/terraform/test
          terraform apply -auto-approve
        continue-on-error: true

      # Preparar playbook
      - name: Prepare playbook
        env:
          #ENVIRONMENT: ${{ env.ENVIRONMENT }}
          GIT_TAG: ${{ steps.obtener-tag.outputs.latest_tag }}
        run: |
          sed -i "s/\${REPOSITORY}/$(echo ${{ secrets.DOCKERHUB_USERNAME }})/g" deploy_frontend/ansible/test/client-ansible.yaml
          sed -i "s/\${TAG}/$(echo ${GIT_TAG})/g" deploy_frontend/ansible/test/client-ansible.yaml
          sed -i "s/\${ENVIRONMENT}/$(echo ${ENVIRONMENT})/g" deploy_frontend/ansible/test/client-ansible.yaml
          cat deploy_frontend/ansible/test/client-ansible.yaml      
    
   # Ejecutar ansible frontend para ENVIRONMENT
      - name: Run Ansible playbook
        run: |
          cd deploy_frontend/ansible/test
          ansible-playbook -i inventory.ini client-ansible.yaml 
          
      